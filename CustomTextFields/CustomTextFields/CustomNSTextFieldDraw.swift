//
//  CustomNSTextFieldDraw.swift
//  CustomNSTextFieldDraw
//
//  Created by Szabolcs Toth on 17/01/2020.
//  Copyright Â© 2020 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public class CustomNSTextFieldDraw : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawLogin(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 382, height: 42), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 382, height: 42), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 382, y: resizedFrame.height / 42)


        //// Color Declarations
        let strokeColor = NSColor(red: 0.592, green: 0.153, blue: 0.592, alpha: 0.8)
        let strokeColor2 = NSColor(red: 0.592, green: 0.153, blue: 0.592, alpha: 1)

        //// Username field.svg Group
        //// Rectangle Drawing
        let rectanglePath = NSBezierPath(roundedRect: NSRect(x: 1.5, y: 1.5, width: 379, height: 39), xRadius: 4.5, yRadius: 4.5)
        NSColor.white.setFill()
        rectanglePath.fill()
        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 1.5, y: 6))
        bezierPath.curve(to: NSPoint(x: 6, y: 1.5), controlPoint1: NSPoint(x: 1.5, y: 3.51), controlPoint2: NSPoint(x: 3.51, y: 1.5))
        bezierPath.line(to: NSPoint(x: 44.5, y: 1.5))
        bezierPath.line(to: NSPoint(x: 44.5, y: 40.5))
        bezierPath.line(to: NSPoint(x: 6, y: 40.5))
        bezierPath.curve(to: NSPoint(x: 1.5, y: 36), controlPoint1: NSPoint(x: 3.51, y: 40.5), controlPoint2: NSPoint(x: 1.5, y: 38.49))
        bezierPath.line(to: NSPoint(x: 1.5, y: 6))
        bezierPath.close()
        strokeColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 25.33, y: 9.94))
        bezier2Path.curve(to: NSPoint(x: 24.56, y: 11.79), controlPoint1: NSPoint(x: 25.33, y: 10.63), controlPoint2: NSPoint(x: 25.05, y: 11.3))
        bezier2Path.curve(to: NSPoint(x: 22.7, y: 12.56), controlPoint1: NSPoint(x: 24.07, y: 12.28), controlPoint2: NSPoint(x: 23.4, y: 12.56))
        bezier2Path.curve(to: NSPoint(x: 20.85, y: 11.79), controlPoint1: NSPoint(x: 22.01, y: 12.56), controlPoint2: NSPoint(x: 21.34, y: 12.28))
        bezier2Path.curve(to: NSPoint(x: 20.08, y: 9.94), controlPoint1: NSPoint(x: 20.35, y: 11.3), controlPoint2: NSPoint(x: 20.08, y: 10.63))
        bezier2Path.line(to: NSPoint(x: 20.08, y: 8.62))
        bezier2Path.curve(to: NSPoint(x: 20.85, y: 6.77), controlPoint1: NSPoint(x: 20.08, y: 7.93), controlPoint2: NSPoint(x: 20.35, y: 7.26))
        bezier2Path.curve(to: NSPoint(x: 22.7, y: 6), controlPoint1: NSPoint(x: 21.34, y: 6.28), controlPoint2: NSPoint(x: 22.01, y: 6))
        bezier2Path.curve(to: NSPoint(x: 24.56, y: 6.77), controlPoint1: NSPoint(x: 23.4, y: 6), controlPoint2: NSPoint(x: 24.07, y: 6.28))
        bezier2Path.curve(to: NSPoint(x: 25.33, y: 8.62), controlPoint1: NSPoint(x: 25.05, y: 7.26), controlPoint2: NSPoint(x: 25.33, y: 7.93))
        bezier2Path.line(to: NSPoint(x: 25.33, y: 9.94))
        bezier2Path.close()
        strokeColor2.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.miterLimit = 4
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = NSBezierPath()
        bezier3Path.move(to: NSPoint(x: 19.64, y: 25.06))
        bezier3Path.line(to: NSPoint(x: 19.64, y: 19.37))
        strokeColor2.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.miterLimit = 4
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = NSBezierPath()
        bezier4Path.move(to: NSPoint(x: 25.76, y: 25.06))
        bezier4Path.line(to: NSPoint(x: 25.76, y: 19.37))
        strokeColor2.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.miterLimit = 4
        bezier4Path.lineCapStyle = .round
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = NSBezierPath()
        bezier5Path.move(to: NSPoint(x: 22.7, y: 13.69))
        bezier5Path.curve(to: NSPoint(x: 17, y: 18.94), controlPoint1: NSPoint(x: 19.8, y: 13.69), controlPoint2: NSPoint(x: 17, y: 16.04))
        bezier5Path.line(to: NSPoint(x: 17, y: 25.06))
        bezier5Path.curve(to: NSPoint(x: 17.08, y: 25.58), controlPoint1: NSPoint(x: 16.99, y: 25.24), controlPoint2: NSPoint(x: 17.02, y: 25.42))
        bezier5Path.curve(to: NSPoint(x: 17.36, y: 26.03), controlPoint1: NSPoint(x: 17.14, y: 25.75), controlPoint2: NSPoint(x: 17.24, y: 25.9))
        bezier5Path.curve(to: NSPoint(x: 17.8, y: 26.33), controlPoint1: NSPoint(x: 17.49, y: 26.16), controlPoint2: NSPoint(x: 17.63, y: 26.26))
        bezier5Path.curve(to: NSPoint(x: 18.31, y: 26.44), controlPoint1: NSPoint(x: 17.96, y: 26.4), controlPoint2: NSPoint(x: 18.14, y: 26.44))
        bezier5Path.curve(to: NSPoint(x: 18.83, y: 26.33), controlPoint1: NSPoint(x: 18.49, y: 26.44), controlPoint2: NSPoint(x: 18.67, y: 26.4))
        bezier5Path.curve(to: NSPoint(x: 19.27, y: 26.03), controlPoint1: NSPoint(x: 18.99, y: 26.26), controlPoint2: NSPoint(x: 19.14, y: 26.16))
        bezier5Path.curve(to: NSPoint(x: 19.55, y: 25.58), controlPoint1: NSPoint(x: 19.39, y: 25.9), controlPoint2: NSPoint(x: 19.48, y: 25.75))
        bezier5Path.curve(to: NSPoint(x: 19.63, y: 25.06), controlPoint1: NSPoint(x: 19.61, y: 25.42), controlPoint2: NSPoint(x: 19.64, y: 25.24))
        bezier5Path.line(to: NSPoint(x: 20.37, y: 34.39))
        bezier5Path.curve(to: NSPoint(x: 20.93, y: 35.54), controlPoint1: NSPoint(x: 20.41, y: 34.83), controlPoint2: NSPoint(x: 20.61, y: 35.24))
        bezier5Path.curve(to: NSPoint(x: 22.13, y: 36), controlPoint1: NSPoint(x: 21.26, y: 35.84), controlPoint2: NSPoint(x: 21.69, y: 36))
        bezier5Path.line(to: NSPoint(x: 23.27, y: 36))
        bezier5Path.curve(to: NSPoint(x: 24.46, y: 35.54), controlPoint1: NSPoint(x: 23.71, y: 36), controlPoint2: NSPoint(x: 24.14, y: 35.83))
        bezier5Path.curve(to: NSPoint(x: 25.02, y: 34.39), controlPoint1: NSPoint(x: 24.78, y: 35.24), controlPoint2: NSPoint(x: 24.98, y: 34.83))
        bezier5Path.line(to: NSPoint(x: 25.76, y: 25.06))
        bezier5Path.curve(to: NSPoint(x: 25.85, y: 25.58), controlPoint1: NSPoint(x: 25.76, y: 25.24), controlPoint2: NSPoint(x: 25.78, y: 25.42))
        bezier5Path.curve(to: NSPoint(x: 26.13, y: 26.03), controlPoint1: NSPoint(x: 25.91, y: 25.75), controlPoint2: NSPoint(x: 26, y: 25.9))
        bezier5Path.curve(to: NSPoint(x: 26.56, y: 26.33), controlPoint1: NSPoint(x: 26.25, y: 26.16), controlPoint2: NSPoint(x: 26.4, y: 26.26))
        bezier5Path.curve(to: NSPoint(x: 27.08, y: 26.44), controlPoint1: NSPoint(x: 26.72, y: 26.4), controlPoint2: NSPoint(x: 26.9, y: 26.44))
        bezier5Path.curve(to: NSPoint(x: 27.59, y: 26.33), controlPoint1: NSPoint(x: 27.25, y: 26.44), controlPoint2: NSPoint(x: 27.43, y: 26.4))
        bezier5Path.curve(to: NSPoint(x: 28.03, y: 26.03), controlPoint1: NSPoint(x: 27.76, y: 26.26), controlPoint2: NSPoint(x: 27.91, y: 26.16))
        bezier5Path.curve(to: NSPoint(x: 28.31, y: 25.58), controlPoint1: NSPoint(x: 28.15, y: 25.9), controlPoint2: NSPoint(x: 28.25, y: 25.75))
        bezier5Path.curve(to: NSPoint(x: 28.39, y: 25.06), controlPoint1: NSPoint(x: 28.37, y: 25.42), controlPoint2: NSPoint(x: 28.4, y: 25.24))
        bezier5Path.line(to: NSPoint(x: 28.39, y: 18.94))
        bezier5Path.curve(to: NSPoint(x: 22.7, y: 13.69), controlPoint1: NSPoint(x: 28.4, y: 16.04), controlPoint2: NSPoint(x: 25.6, y: 13.69))
        bezier5Path.close()
        strokeColor2.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.miterLimit = 4
        bezier5Path.lineCapStyle = .round
        bezier5Path.lineJoinStyle = .round
        bezier5Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawPassword(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 382, height: 42), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 382, height: 42), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 382, y: resizedFrame.height / 42)


        //// Color Declarations
        let strokeColor = NSColor(red: 0.592, green: 0.153, blue: 0.592, alpha: 0.8)
        let strokeColor2 = NSColor(red: 0.592, green: 0.153, blue: 0.592, alpha: 1)

        //// Pasword field.svg Group
        //// Rectangle Drawing
        let rectanglePath = NSBezierPath(roundedRect: NSRect(x: 1.5, y: 1.5, width: 379, height: 39), xRadius: 4.5, yRadius: 4.5)
        NSColor.white.setFill()
        rectanglePath.fill()
        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 1.5, y: 6))
        bezierPath.curve(to: NSPoint(x: 6, y: 1.5), controlPoint1: NSPoint(x: 1.5, y: 3.51), controlPoint2: NSPoint(x: 3.51, y: 1.5))
        bezierPath.line(to: NSPoint(x: 44.5, y: 1.5))
        bezierPath.line(to: NSPoint(x: 44.5, y: 40.5))
        bezierPath.line(to: NSPoint(x: 6, y: 40.5))
        bezierPath.curve(to: NSPoint(x: 1.5, y: 36), controlPoint1: NSPoint(x: 3.51, y: 40.5), controlPoint2: NSPoint(x: 1.5, y: 38.49))
        bezierPath.line(to: NSPoint(x: 1.5, y: 6))
        bezierPath.close()
        strokeColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 19, y: 17))
        bezier2Path.line(to: NSPoint(x: 19, y: 12.9))
        bezier2Path.curve(to: NSPoint(x: 20.14, y: 10.14), controlPoint1: NSPoint(x: 19, y: 11.87), controlPoint2: NSPoint(x: 19.41, y: 10.87))
        bezier2Path.curve(to: NSPoint(x: 22.9, y: 9), controlPoint1: NSPoint(x: 20.87, y: 9.41), controlPoint2: NSPoint(x: 21.87, y: 9))
        bezier2Path.curve(to: NSPoint(x: 25.66, y: 10.14), controlPoint1: NSPoint(x: 23.93, y: 9), controlPoint2: NSPoint(x: 24.93, y: 9.41))
        bezier2Path.curve(to: NSPoint(x: 26.8, y: 12.9), controlPoint1: NSPoint(x: 26.39, y: 10.87), controlPoint2: NSPoint(x: 26.8, y: 11.87))
        bezier2Path.line(to: NSPoint(x: 26.8, y: 17))
        bezier2Path.curve(to: NSPoint(x: 29.8, y: 19.01), controlPoint1: NSPoint(x: 27.91, y: 17.48), controlPoint2: NSPoint(x: 28.93, y: 18.16))
        bezier2Path.line(to: NSPoint(x: 29.8, y: 12.9))
        bezier2Path.curve(to: NSPoint(x: 27.78, y: 8.02), controlPoint1: NSPoint(x: 29.8, y: 11.07), controlPoint2: NSPoint(x: 29.07, y: 9.31))
        bezier2Path.curve(to: NSPoint(x: 22.9, y: 6), controlPoint1: NSPoint(x: 26.48, y: 6.73), controlPoint2: NSPoint(x: 24.73, y: 6))
        bezier2Path.curve(to: NSPoint(x: 18.02, y: 8.02), controlPoint1: NSPoint(x: 21.07, y: 6), controlPoint2: NSPoint(x: 19.32, y: 6.73))
        bezier2Path.curve(to: NSPoint(x: 16, y: 12.9), controlPoint1: NSPoint(x: 16.73, y: 9.31), controlPoint2: NSPoint(x: 16, y: 11.07))
        bezier2Path.line(to: NSPoint(x: 16, y: 19.01))
        bezier2Path.curve(to: NSPoint(x: 19, y: 17), controlPoint1: NSPoint(x: 16.87, y: 18.16), controlPoint2: NSPoint(x: 17.89, y: 17.48))
        bezier2Path.line(to: NSPoint(x: 19, y: 17))
        bezier2Path.close()
        strokeColor2.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.miterLimit = 4
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()


        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalIn: NSRect(x: 13, y: 16.2, width: 19.8, height: 19.8))
        strokeColor2.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = NSBezierPath()
        bezier3Path.move(to: NSPoint(x: 24.4, y: 25.5))
        bezier3Path.curve(to: NSPoint(x: 24.21, y: 24.77), controlPoint1: NSPoint(x: 24.4, y: 25.24), controlPoint2: NSPoint(x: 24.33, y: 24.99))
        bezier3Path.curve(to: NSPoint(x: 23.69, y: 24.22), controlPoint1: NSPoint(x: 24.09, y: 24.55), controlPoint2: NSPoint(x: 23.91, y: 24.36))
        bezier3Path.curve(to: NSPoint(x: 22.97, y: 24), controlPoint1: NSPoint(x: 23.47, y: 24.09), controlPoint2: NSPoint(x: 23.22, y: 24.01))
        bezier3Path.curve(to: NSPoint(x: 22.23, y: 24.16), controlPoint1: NSPoint(x: 22.71, y: 23.99), controlPoint2: NSPoint(x: 22.46, y: 24.04))
        bezier3Path.curve(to: NSPoint(x: 21.66, y: 24.65), controlPoint1: NSPoint(x: 22, y: 24.27), controlPoint2: NSPoint(x: 21.8, y: 24.44))
        bezier3Path.curve(to: NSPoint(x: 21.41, y: 25.37), controlPoint1: NSPoint(x: 21.52, y: 24.87), controlPoint2: NSPoint(x: 21.43, y: 25.11))
        bezier3Path.curve(to: NSPoint(x: 21.53, y: 26.11), controlPoint1: NSPoint(x: 21.38, y: 25.62), controlPoint2: NSPoint(x: 21.43, y: 25.88))
        bezier3Path.curve(to: NSPoint(x: 22, y: 26.7), controlPoint1: NSPoint(x: 21.63, y: 26.34), controlPoint2: NSPoint(x: 21.8, y: 26.55))
        bezier3Path.line(to: NSPoint(x: 22, y: 28.5))
        bezier3Path.curve(to: NSPoint(x: 22.26, y: 29.14), controlPoint1: NSPoint(x: 22, y: 28.74), controlPoint2: NSPoint(x: 22.09, y: 28.97))
        bezier3Path.curve(to: NSPoint(x: 22.9, y: 29.4), controlPoint1: NSPoint(x: 22.43, y: 29.31), controlPoint2: NSPoint(x: 22.66, y: 29.4))
        bezier3Path.curve(to: NSPoint(x: 23.54, y: 29.14), controlPoint1: NSPoint(x: 23.14, y: 29.4), controlPoint2: NSPoint(x: 23.37, y: 29.31))
        bezier3Path.curve(to: NSPoint(x: 23.8, y: 28.5), controlPoint1: NSPoint(x: 23.71, y: 28.97), controlPoint2: NSPoint(x: 23.8, y: 28.74))
        bezier3Path.line(to: NSPoint(x: 23.8, y: 26.7))
        bezier3Path.curve(to: NSPoint(x: 24.24, y: 26.17), controlPoint1: NSPoint(x: 23.99, y: 26.56), controlPoint2: NSPoint(x: 24.14, y: 26.38))
        bezier3Path.curve(to: NSPoint(x: 24.4, y: 25.5), controlPoint1: NSPoint(x: 24.35, y: 25.96), controlPoint2: NSPoint(x: 24.4, y: 25.73))
        bezier3Path.close()
        strokeColor2.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.miterLimit = 4
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }




    @objc(CustomNSTextFieldDrawResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
